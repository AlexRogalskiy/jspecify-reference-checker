plugins {
    id 'java'
    id 'com.diffplug.gradle.spotless' version '4.0.1'
    id 'eclipse'
    // https://github.com/tbroyer/gradle-errorprone-plugin
    id 'net.ltgt.errorprone' version '1.3.0'
}

repositories {
    jcenter()
}

configurations {
    errorproneJavac
}

ext {
    parentDir = file("${rootDir}/../").absolutePath
    cfHome = "${parentDir}/checker-framework"
    jspecifyHome = "${parentDir}/jspecify"
}

sourceCompatibility = 1.9

dependencies {
    implementation files("${cfHome}/checker/dist/checker-qual.jar")
    implementation files("${cfHome}/checker/dist/checker.jar")
    implementation files("${jspecifyHome}/build/libs/jspecify-0.0.0-SNAPSHOT.jar")

    // Testing
    testImplementation 'junit:junit:4.12'
    // The jsr305 dep lets us use its annotations in some of the sample inputs we test against.
    testImplementation 'com.google.code.findbugs:jsr305:3.0.2'
    // The Guava dep lets us test our special handling of some Guava classes.
    testImplementation 'com.google.guava:guava:31.1-jre'
    testImplementation 'org.plumelib:plume-util:1.5.5'
    testImplementation files("${cfHome}/framework-test/build/libs/framework-test-3.21.5-SNAPSHOT.jar")

    errorproneJavac "com.google.errorprone:javac:9+181-r4173-1"
    errorprone "com.google.errorprone:error_prone_core:2.4.0"
}

tasks.withType(JavaCompile).all {
    options.compilerArgs.add("-Xlint:all")
    // ErrorProne makes suppressing these easier
    options.compilerArgs.add("-Xlint:-fallthrough")

    options.errorprone.disable("BadImport")

    options.compilerArgs.addAll(
        [
            "api",
            "code",
            "comp",
            "file",
            "main",
            "model",
            "parser",
            "processing",
            "resources",
            "tree",
            "util",
        ].collect { """--add-exports=jdk.compiler/com.sun.tools.javac.$it=ALL-UNNAMED""" })
}

tasks.withType(Test) {
    if (!JavaVersion.current().java9Compatible) {
        jvmArgs "-Xbootclasspath/p:${configurations.errorproneJavac.asPath}"
    }

    testLogging {
        showStackTraces = false
        showStandardStreams = true
        events "failed"
        exceptionFormat "full"
    }
}

test {
    include '**/NullSpecTest$Minimal.class'

    inputs.files("${rootDir}/tests/minimal")
}

task jspecifySamplesTest(type: Test) {
    description = 'Run the checker against the JSpecify samples.'
    group = 'verification'

    inputs.files("${jspecifyHome}/samples")
}

clean.doFirst {
    delete "${rootDir}/tests/build/"
}

spotless {
    java {
        googleJavaFormat()
    }
}

task ensureCheckerFrameworkBuilt() {
    description 'Build the Checker Framework and all dependencies'
    doLast {
        /* Introduce an autoUpdateCF variable if we want to support that usage.
        if (autoUpdateCF) {
            exec {
                workingDir cfHome
                executable 'git'
                args = ['pull', '-q']
                ignoreExitValue = true
            }
        } else {
            println "Found existing ${cfHome}. Use -PautoUpdateCF=true if you want to git pull automatically."
        }
        */
        exec {
            workingDir cfHome
            executable './gradlew'
            // Skip Javadoc to save time. Perform a release build so that we repackage javaparser (not that that seems to matter here, but it's consistent with how the Checker Framework would be deployed).
            args = ['cloneAndBuildDependencies', '-x', 'javadoc', '-x', 'allJavadoc', '-Prelease=true']
        }
    }
}

compileJava.dependsOn(ensureCheckerFrameworkBuilt)

// Use `./gradlew eclipseClasspath` to create Eclipse/VSCode configurations
eclipse.classpath {
    defaultOutputDir = file("build/default")
    file.whenMerged { cp ->
        cp.entries.forEach { cpe ->
            if (cpe instanceof org.gradle.plugins.ide.eclipse.model.SourceFolder) {
                cpe.output = cpe.output.replace "bin/", "build/classes/java/"
            }
            if (cpe instanceof org.gradle.plugins.ide.eclipse.model.Output) {
                cpe.path = cpe.path.replace "bin/", "build/"
            }
        }
    }
}
